简单来说，⼆分图就是⼀幅拥有特殊性质的
图：能够⽤两种颜⾊为所有顶点着⾊，使得任何⼀条边的两个顶点颜⾊不同。

明⽩了⼆分图是什么，能解决什么实际问题呢？算法⽅⾯，常⻅的操作是如
何判定⼀幅图是不是⼆分图。⽐如说下⾯这道 LeetCode 题⽬：
给人分组，互相不喜欢的人不能分在一组

你想想，如果我们把每个⼈视为⼀个顶点，边代表讨厌；相互讨厌的两个⼈
之间连接⼀条边，就可以形成⼀幅图。那么根据刚才⼆分图的定义，如果这
幅图是⼀幅⼆分图，就说明这些⼈可以被分为两组，否则的话就不⾏。
这是判定⼆分图算法的⼀个应⽤，其实⼆分图在数据结构⽅⾯也有⼀些不错
的特性。
⽐如说我们需要⼀种数据结构来储存电影和演员之间的关系：某⼀部电影肯
定是由多位演员出演的，且某⼀位演员可能会出演多部电影。你使⽤什么数
据结构来存储这种关系呢？
既然是存储映射关系，最简单的不就是使⽤哈希表嘛，我们可以使⽤⼀个
HashMap<String, List<String>> 来存储电影到演员列表的映射，如果给⼀部
电影的名字，就能快速得到出演该电影的演员。
但是如果给出⼀个演员的名字，我们想快速得到该演员演出的所有电影，怎
么办呢？这就需要「反向索引」，对之前的哈希表进⾏⼀些操作，新建另⼀
个哈希表，把演员作为键，把电影列表作为值。


对于上⾯这个例⼦，可以使⽤⼆分图来取代哈希表。电影和演员是具有⼆分
图性质的：如果把电影和演员视为图中的顶点，出演关系作为边，那么与电
影顶点相连的⼀定是演员，与演员相邻的⼀定是电影，不存在演员和演员相
连，电影和电影相连的情况。
回顾⼆分图的定义，如果对演员和电影顶点着⾊，肯定就是⼀幅⼆分图：


如果这幅图构建完成，就不需要反向索引，对于演员顶点，其直接连接的顶
点就是他出演的电影，对于电影顶点，其直接连接的顶点就是出演演员。
当然，对于这个问题，书中还提到了⼀些其他有趣的玩法，⽐如说社交⽹络
中「间隔度数」的计算（六度空间理论应该听说过）等等，其实就是⼀个
BFS ⼴度优先搜索寻找最短路径的问题，具体代码实现这⾥就不展开了。