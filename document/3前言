先刷⼆叉树，先刷⼆叉树，先刷⼆叉树！
刷⼆叉树看到题⽬没思路？根据很多读者的问题，其实⼤家不是没思路，只
是没有理解我们说的「框架」是什么。不要⼩看这⼏⾏破代码，⼏乎所有⼆
叉树的题⽬都是⼀套这个框架就出来了。

对于⼀个理解⼆叉树的⼈来说，刷⼀道⼆叉树的题⽬花不了多⻓时间。那么
如果你对刷题⽆从下⼿或者有畏惧⼼理，不妨从⼆叉树下⼿，前 10 道也许
有点难受；结合框架再做 20 道，也许你就有点⾃⼰的理解了；刷完整个专
题，再去做什么回溯动规分治专题，你就会发现只要涉及递归的问题，都是
树的问题。

其实很多动态规划问题就是在遍历⼀棵树，你如果对树的遍历操作烂熟于
⼼，起码知道怎么把思路转化成代码，也知道如何提取别⼈解法的核⼼思路。

综上，对于畏惧算法的朋友来说，可以先刷树的相关题⽬，试着从框架上看
问题，⽽不要纠结于细节问题。
纠结细节问题，就⽐如纠结 i 到底应该加到 n 还是加到 n - 1，这个数组的⼤
⼩到底应该开 n 还是 n + 1 ？
从框架上看问题，就是像我们这样基于框架进⾏抽取和扩展，既可以在看别
⼈解法时快速理解核⼼逻辑，也有助于找到我们⾃⼰写解法时的思路⽅向。
当然，如果细节出错，你得不到正确的答案，但是只要有框架，你再错也错
不到哪去，因为你的⽅向是对的。
但是，你要是⼼中没有框架，那么你根本⽆法解题，给了你答案，你也不会
发现这就是个树的遍历问题。
这种思维是很重要的，动态规划详解中总结的找状态转移⽅程的⼏步流程，
有时候按照流程写出解法，说实话我⾃⼰都不知道为啥是对的，反正它就是
对了。。。

这就是框架的⼒量，能够保证你在快睡着的时候，依然能写出正确的程序；
就算你啥都不会，都能⽐别⼈⾼⼀个级别。

先基础，刷题，摸出框架套路，灵活运用
